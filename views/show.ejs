<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuickScribe - <%= note.title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <nav class="navbar">
        <div class="nav-left">
            <button onclick="window.location.href='/notes'" class="back-btn">
                <i class="fas fa-arrow-left"></i>
            </button>
            <h1>Quick<span class="brand-accent">Scribe</span></h1>
        </div>
        <div class="nav-right">
            <div class="profile-dropdown">
                <button class="profile-btn" onclick="toggleDropdown(event)">
                    <i class="fas fa-user-circle"></i>
                    <span class="profile-name" id="profileUsername"><%= user.username %></span>
                    <i class="fas fa-caret-down"></i> <!-- Changed from fa-chevron-down to fa-caret-down -->
                </button>
                <div class="dropdown-menu" id="profileDropdown">
                    <div class="profile-header">
                        <i class="fas fa-user-circle"></i>
                        <div class="profile-info">
                            <h4><%= user.username %></h4>
                        </div>
                    </div>
                    <div class="dropdown-divider"></div>
                    <a href="/profile">
                        <i class="fas fa-cog"></i>
                        Settings
                    </a>
                    <a href="/logout">
                        <i class="fas fa-sign-out-alt"></i>
                        Logout
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <div class="note-view">
        <div class="note-header">
            <div class="title-container">
                <div class="title-wrapper">
                    <h1 id="noteTitle" class="note-title"><%= note.title %></h1>
                    <button type="button" class="rename-btn" title="Rename note">
                        <i class="fas fa-pencil-alt"></i>
                    </button>
                </div>
                <div id="renameInput" class="rename-input-container" style="display: none;">
                    <input type="text" id="newFilename" class="rename-input" 
                           placeholder="Enter new title">
                    <button id="saveRenameBtn" class="save-rename-btn">
                        <i class="fas fa-check"></i> Save
                    </button>
                    <button class="cancel-rename-btn" onclick="cancelRename()">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
        <form action="/update/<%= note._id %>" method="post" id="noteForm">
            <textarea name="Description" id="noteContent"><%= note.content %></textarea>
            <div class="button-group">
                <button type="submit" id="saveButton" class="save-changes-btn" disabled>
                    <i class="fas fa-save"></i> Save Changes
                </button>
                <button type="button" class="delete-note-btn" onclick="confirmDelete()">
                    <i class="fas fa-trash"></i> Delete Note
                </button>
            </div>
        </form>
    </div>

    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3>Delete Note</h3>
            <p>Are you sure you want to delete this note? This action cannot be undone.</p>
            <div class="modal-actions">
                <button onclick="deleteNote()" class="delete-confirm-btn">
                    <i class="fas fa-trash"></i> Delete
                </button>
                <button onclick="closeDeleteModal()" class="cancel-btn">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        const noteForm = document.getElementById('noteForm');
        const noteContent = document.getElementById('noteContent');
        const saveButton = document.getElementById('saveButton');
        let originalContent = noteContent.value;

        // Handle note content changes
        noteContent.addEventListener('input', function() {
            const hasChanged = this.value !== originalContent;
            saveButton.disabled = !hasChanged;
            saveButton.classList.toggle('active', hasChanged);
        });

        // Handle form submission
        noteForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const noteId = '<%= note._id %>';

            try {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

                const response = await fetch(`/update/${noteId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        Description: noteContent.value
                    })
                });

                const data = await response.json();
                if (data.success) {
                    originalContent = noteContent.value;
                    saveButton.disabled = true;
                    saveButton.classList.remove('active');
                    saveButton.innerHTML = '<i class="fas fa-save"></i> Save Changes';
                    showNotification('Changes saved successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to save changes');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Failed to save changes', 'error');
                saveButton.disabled = false;
            }
        });

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Update the rename-related functions
        function startRename() {
            const titleElement = document.getElementById('noteTitle');
            const renameInput = document.getElementById('renameInput');
            const filenameInput = document.getElementById('newFilename');
            const saveRenameBtn = document.getElementById('saveRenameBtn');
            
            if (!titleElement || !renameInput || !filenameInput) {
                console.error('Required elements not found');
                return;
            }

            titleElement.style.display = 'none';
            renameInput.style.display = 'flex';
            filenameInput.value = titleElement.textContent;
            filenameInput.focus();

            // Add event listener to save button
            saveRenameBtn.onclick = () => renameNote();
        }

        async function renameNote() {
            const noteId = '<%= note._id %>';
            const newFilename = document.getElementById('newFilename').value.trim();
            const saveBtn = document.getElementById('saveRenameBtn');

            if (!newFilename) {
                alert('Title cannot be empty');
                return;
            }

            try {
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

                const response = await fetch(`/rename/${noteId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ newFilename })
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    document.getElementById('noteTitle').textContent = data.newTitle;
                    document.title = `QuickScribe - ${data.newTitle}`;
                    cancelRename();
                    showNotification('Note renamed successfully', 'success');
                } else {
                    throw new Error(data.message || 'Failed to rename note');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification(error.message, 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="fas fa-check"></i> Save';
            }
        }

        function cancelRename() {
            const titleElement = document.getElementById('noteTitle');
            const renameInput = document.getElementById('renameInput');
            
            titleElement.style.display = 'block';
            renameInput.style.display = 'none';
        }

        // Add event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const renameBtn = document.querySelector('.rename-btn');
            const filenameInput = document.getElementById('newFilename');

            renameBtn.addEventListener('click', function(e) {
                e.preventDefault();
                startRename();
            });

            filenameInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    renameNote();
                }
            });

            filenameInput.addEventListener('keyup', function(e) {
                if (e.key === 'Escape') {
                    cancelRename();
                }
            });
        });

        // Add this helper function for notifications
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Add inside your existing <script> tag// Add to your existing script tag
        function toggleDropdown(event) {
            if (event) {
                event.stopPropagation();
            }
            const dropdown = document.getElementById('profileDropdown');
            const profileBtn = event.currentTarget;
            dropdown.classList.toggle('show');
            profileBtn.classList.toggle('active');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('profileDropdown');
            const profileBtn = document.querySelector('.profile-btn');
    
            if (!profileBtn.contains(event.target) && !dropdown.contains(event.target)) {
                dropdown.classList.remove('show');
                profileBtn.classList.remove('active');
            }
        });

        // Prevent dropdown from closing when clicking inside it
        document.getElementById('profileDropdown').addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Add these functions to your existing script
        function confirmDelete() {
            document.getElementById('deleteModal').style.display = 'flex';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        async function deleteNote() {
            const noteId = '<%= note._id %>';
            try {
                const response = await fetch(`/notes/${noteId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (data.success) {
                    window.location.href = '/notes';
                } else {
                    throw new Error(data.message || 'Failed to delete note');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to delete note');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('deleteModal');
            if (event.target === modal) {
                closeDeleteModal();
            }
        }

        // Add inside your DOMContentLoaded event listener
        document.addEventListener('DOMContentLoaded', function() {
            // Verify user data is loaded
            const username = '<%= user.username %>';
            const profileUsername = document.getElementById('profileUsername');
            
            if (!username) {
                console.error('Username not loaded');
            }
            
            if (profileUsername) {
                profileUsername.textContent = username;
            }
        });
    </script>
</body>
</html>