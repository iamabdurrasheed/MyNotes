<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QuickScribe</title>
  <link rel="stylesheet" href="stylesheets/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <h1>Quick<span class="brand-accent">Scribe</span></h1>
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Search notes..." onkeyup="searchNotes()">
            </div>
        </div>
        <div class="filter-container">
            <button onclick="toggleFavorites()" id="favoriteFilterBtn" class="filter-btn">
                <i class="far fa-heart"></i> Show Favorites
            </button>
        </div>
        <div class="nav-links">
            <div class="user-profile">
                <button onclick="toggleProfileMenu()" class="profile-btn">
                    <i class="fas fa-user-circle"></i>
                    <%= user.username %>
                </button>
                <div id="profileMenu" class="profile-menu">
                    <div class="profile-header">
                        <i class="fas fa-user"></i>
                        <div class="profile-info">
                            <h4><%= user.username %></h4>
                            <small>Member since <%= new Date(user.createdAt).toLocaleDateString() %></small>
                        </div>
                    </div>
                    <div class="profile-actions">
                        <a href="/profile" class="profile-link">
                            <i class="fas fa-cog"></i> Settings
                        </a>
                        <a href="/logout" class="profile-link">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- New Note Button -->
    <div class="new-note-container">
        <button onclick="toggleNewNoteForm()" class="new-note-btn">
            <i class="fas fa-plus"></i> New Note
        </button>
    </div>

    <!-- New Note Form -->
    <div id="newNoteForm" class="form" style="display: none;">
        <div class="form-header">
            <button onclick="toggleNewNoteForm()" class="back-btn">
                <i class="fas fa-arrow-left"></i>
            </button>
            <h2>New Note</h2>
        </div>
        <form action="/create" method="post">
            <input type="text" name="Title" placeholder="Title" required>
            <textarea name="Description" rows="10" placeholder="Write your note here..." required></textarea>
            <input type="submit" value="Save Note">
        </form>
    </div>

    <!-- Notes Grid -->
    <div class="notes-grid">
        <% notes.forEach(function(note) { %>
            <div class="note-card" onclick="openNote('<%= note._id %>')" data-noteid="<%= note._id %>">
                <div class="note-actions" onclick="event.stopPropagation()">
                    <button class="favorite-btn <%= note.isFavorite ? 'favorite-active' : '' %>" 
                            onclick="toggleFavorite(this, '<%= note._id %>')">
                        <i class="<%= note.isFavorite ? 'fas' : 'far' %> fa-heart"></i>
                    </button>
                </div>
                <h2><%= note.title %></h2>
                <p class="note-preview"><%= note.content.substring(0, 100) %>...</p>
                <div class="note-meta">
                    <small>Last updated: <%= new Date(note.updatedAt).toLocaleDateString() %></small>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3>Confirm Deletion</h3>
            <p>Are you sure you want to delete this note?</p>
            <div class="modal-buttons">
                <button type="button" onclick="deleteNote()" class="confirm-delete">Delete</button>
                <button type="button" onclick="closeModal()" class="cancel-delete">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        let noteToDelete = '';

        function openNote(noteId) {
            window.location.href = `/notes/${noteId}`;
        }

        function confirmDelete(noteId) {
            const modal = document.getElementById('deleteModal');
            modal.style.display = 'flex';
            modal.dataset.noteId = noteId; // Store the noteId in the modal
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        async function deleteNote() {
            const modal = document.getElementById('deleteModal');
            const noteId = modal.dataset.noteId;
            
            try {
                const response = await fetch(`/notes/${noteId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (data.success) {
                    // Remove the note card from the UI
                    const noteCard = document.querySelector(`[data-noteid="${noteId}"]`);
                    if (noteCard) {
                        noteCard.remove();
                    }
                    closeDeleteModal();
                } else {
                    throw new Error(data.message || 'Failed to delete note');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to delete note');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('deleteModal');
            if (event.target === modal) {
                closeDeleteModal();
            }
        }

        function closeModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        let showingFavorites = false;

        async function toggleFavorites() {
            const filterBtn = document.querySelector('.filter-btn');
            const btnIcon = filterBtn.querySelector('i');
            const btnText = filterBtn.textContent.trim();
            showingFavorites = !showingFavorites;
            
            // Update button appearance
            filterBtn.classList.toggle('active', showingFavorites);
            btnIcon.className = showingFavorites ? 'fas fa-heart' : 'far fa-heart';
            filterBtn.innerHTML = `${btnIcon.outerHTML} ${showingFavorites ? 'Show All' : 'Show Favorites'}`;

            try {
                if (showingFavorites) {
                    const response = await fetch('/favorites');
                    const data = await response.json();
                    
                    if (data.success) {
                        updateNotesGrid(data.notes);
                    }
                } else {
                    location.reload(); // Reset to show all notes
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        async function toggleFavorite(button, noteId) {
            try {
                const response = await fetch(`/toggle-favorite/${noteId}`, {
                    method: 'POST'
                });
                const data = await response.json();

                if (data.success) {
                    const icon = button.querySelector('i');
                    icon.classList.toggle('far');
                    icon.classList.toggle('fas');
                    button.classList.toggle('favorite-active');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function updateNotesGrid(notes) {
            const notesGrid = document.querySelector('.notes-grid');
            if (!notes.length) {
                notesGrid.innerHTML = '<p class="no-notes">No favorite notes found</p>';
                return;
            }

            notesGrid.innerHTML = notes.map(note => `
                <div class="note-card" onclick="openNote('${note._id}')" data-noteid="${note._id}">
                    <div class="note-actions" onclick="event.stopPropagation()">
                        <button class="favorite-btn ${note.isFavorite ? 'favorite-active' : ''}" 
                                onclick="toggleFavorite(this, '${note._id}')">
                            <i class="${note.isFavorite ? 'fas' : 'far'} fa-heart"></i>
                        </button>
                        <button class="delete-btn" onclick="confirmDelete('${note._id}')" title="Delete note">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <h2>${note.title}</h2>
                    <p class="note-preview">${note.content.substring(0, 100)}...</p>
                    <div class="note-meta">
                        <small>Last updated: ${new Date(note.updatedAt).toLocaleDateString()}</small>
                    </div>
                </div>
            `).join('');
        }

        function toggleNewNoteForm() {
            var newNoteForm = document.getElementById("newNoteForm");
            newNoteForm.style.display = newNoteForm.style.display === "none" ? "block" : "none";
        }

        function searchNotes() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const noteCards = document.querySelectorAll('.note-card');
            
            noteCards.forEach(card => {
                const title = card.querySelector('h2').textContent.toLowerCase();
                if (title.includes(searchTerm)) {
                    card.style.display = 'block';
                    // Calculate similarity for sorting
                    card.dataset.similarity = calculateSimilarity(title, searchTerm);
                } else {
                    card.style.display = 'none';
                    card.dataset.similarity = 0;
                }
            });

            // Sort notes based on similarity
            const notesGrid = document.querySelector('.notes-grid');
            const sortedCards = Array.from(noteCards).sort((a, b) => {
                return b.dataset.similarity - a.dataset.similarity;
            });

            // Reorder notes
            sortedCards.forEach(card => notesGrid.appendChild(card));
        }

        function calculateSimilarity(str1, str2) {
            // Simple substring match score
            if (str1.startsWith(str2)) return 2; // Prefix match gets highest priority
            if (str1.includes(str2)) return 1;   // Contains match gets medium priority
            return 0;                            // No match
        }

        function toggleProfileMenu() {
            const menu = document.getElementById('profileMenu');
            menu.classList.toggle('active');

            // Close menu when clicking outside
            document.addEventListener('click', function closeMenu(e) {
                if (!menu.contains(e.target) && !e.target.matches('.profile-btn')) {
                    menu.classList.remove('active');
                    document.removeEventListener('click', closeMenu);
                }
            });
        }
    </script>
</body>
</html>
